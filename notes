;; -*- mode: outline; outline-regexp: " *[-\+]"; indent-tabs-mode: nil; fill-column: 120 -*-

^c^d hide subtree
^c^s show subtree

- engine
 - test server callback sends response
  - make messages order and new exec
 - use same session loop for session and eng session


 - add log functions and context
  - function to set


  - session is from connect
   - pass in all params needed
    - need server and client id
  - engine session is different or same for server side?
   - logon logic is different
   - heartbeat is the same
   - ServerSession

 - impl
  - Store
   - app to read and display file
  - Engine
   - listen and accept to create sessions

  - Session
   - add thread to create

   - logon logic
    - test with callback they fakes other side
    - test both server and client side
  - test logon
   - use saved messages in store files

 - engine test
  - 
  - start thread with server engine in it
  - create client engine

  - engine.c
   - connect and start
    - establish connection
    - create session
     - start file
     - logon
  - session.[ch]
   - session_create()
   - ...

 - where
  - src/ofix/engine.c
   - connect.c
   - session.c
    - logon, seq_num, heartbeat
    - 1 thread per session
    - owns fix file
 - initial attributes
  - fix_dir - where messages are saved
  - ipaddr - default to localhost (both server and client)
  - port
  - heartbeat
  - auth_file
  - id

 - save all messages
  - required / used for resend
  - store in file with client id + session id
  - keep maps/arrays in memory for offset and length
   - separate for send and receive
  - file format
   - header
    - key:value, one per line
    - last line is blanks or \n\n
    - engine/this id
    - other id
    - heartbeat
    - auth filepath
    - ip:port
   - msgs
    - separate by \n just for ease of debugging
 - manage sequence numbers
  - handle resends
 - logon
  - only support simple user and password
 - heartbeat
 - handle rejects
  - send on bad message
  - close on corrupt message

